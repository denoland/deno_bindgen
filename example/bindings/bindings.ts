// deno-lint-ignore-file

// This file is automatically generated by deno_bindgen.
// Do not edit this file directly.

const { dlopen } = Deno;

const { symbols } = dlopen('./target/debug/libdeno_bindgen_test.dylib', {
  add: {
    parameters: [
      'i32',
      'i32',
    ],
    result: 'i32',
    nonblocking: false
  },
  add2: {
    parameters: [
      'i32',
      'i32',
    ],
    result: 'i32',
    nonblocking: false
  },
  bytelen: {
    parameters: [
      'buffer',
      'usize',
    ],
    result: 'u32',
    nonblocking: false
  },
  buf_mut: {
    parameters: [
      'buffer',
      'usize',
    ],
    result: 'void',
    nonblocking: false
  },
  cstr: {
    parameters: [],
    result: 'pointer',
    nonblocking: false
  },
  strlen: {
    parameters: [
      'pointer',
    ],
    result: 'u32',
    nonblocking: false
  },
  non_blocking: {
    parameters: [],
    result: 'i32',
    nonblocking: true
  },
  make_foo: {
    parameters: [],
    result: 'pointer',
    nonblocking: false
  },
  __Foo_new: {
    parameters: [],
    result: 'pointer',
    nonblocking: false
  },
  __Foo_foo: {
    parameters: [
      'pointer',
    ],
    result: 'void',
    nonblocking: false
  },
  __Foo_bar: {
    parameters: [
      'pointer',
      'u32',
    ],
    result: 'u32',
    nonblocking: false
  },
});

export function add(
  arg0: number,
  arg1: number,
): number {
  return symbols.add(
    arg0,
    arg1,
  )
}

export function add2(
  arg0: number,
  arg1: number,
): number {
  return symbols.add2(
    arg0,
    arg1,
  )
}

export function bytelen(
  arg0: Uint8Array,
): number {
  return symbols.bytelen(
    arg0,
    arg0.byteLength,
  )
}

export function buf_mut(
  arg0: Uint8Array,
): void {
  return symbols.buf_mut(
    arg0,
    arg0.byteLength,
  )
}

export function cstr(): Deno.PointerObject | null {
  return symbols.cstr()
}

export function strlen(
  arg0: Deno.PointerObject | null,
): number {
  return symbols.strlen(
    arg0,
  )
}

export function non_blocking(): Promise<number> {
  return symbols.non_blocking()
}

export function make_foo(): Foo {
  const ret = symbols.make_foo()
  return Foo.__constructor(ret);
}

function __Foo_new(): Foo {
  const ret = symbols.__Foo_new()
  return Foo.__constructor(ret);
}

function __Foo_foo(
  arg0: Deno.PointerObject | null,
): void {
  return symbols.__Foo_foo(
    arg0,
  )
}

function __Foo_bar(
  arg0: Deno.PointerObject | null,
  arg1: number,
): number {
  return symbols.__Foo_bar(
    arg0,
    arg1,
  )
}

export class Foo {
  ptr: Deno.PointerObject | null = null;

  static __constructor(ptr: Deno.PointerObject | null) {
    const self = Object.create(Foo.prototype);
    self.ptr = ptr;
    return self;
  }

  constructor() {
    return __Foo_new()
  }

  foo(): void {
    return __Foo_foo(
      this.ptr,
    )
  }

  bar(arg0: number): number {
    return __Foo_bar(
      this.ptr,
      arg0,
    )
  }
}