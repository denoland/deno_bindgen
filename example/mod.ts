// deno-lint-ignore-file

// This file is automatically generated by deno_bindgen.
// Do not edit this file directly.

const { dlopen } = Deno;

const { symbols } = dlopen(
  "/Users/divy/gh/deno_bindgen/example/target/debug/libdeno_usb.dylib",
  {
    __Context_init: {
      parameters: [],
      result: "pointer",
      nonblocking: false,
    },
    __Context_lsusb: {
      parameters: [
        "pointer",
      ],
      result: "void",
      nonblocking: false,
    },
    __Context_open: {
      parameters: [
        "pointer",
        "u16",
        "u16",
      ],
      result: "pointer",
      nonblocking: false,
    },
    __Context_dealloc: {
      parameters: [
        "pointer",
      ],
      result: "void",
      nonblocking: false,
    },
    __Device_claim_interface: {
      parameters: [
        "pointer",
        "u8",
      ],
      result: "void",
      nonblocking: false,
    },
    __Device_select_alternate_interface: {
      parameters: [
        "pointer",
        "u8",
        "u8",
      ],
      result: "void",
      nonblocking: false,
    },
    __Device_dealloc: {
      parameters: [
        "pointer",
      ],
      result: "void",
      nonblocking: false,
    },
  },
);

function __Context_init(): Context {
  const ret = symbols.__Context_init();
  return Context.__constructor(ret);
}

function __Context_lsusb(
  arg0: Deno.PointerObject | null,
): void {
  return symbols.__Context_lsusb(
    arg0,
  );
}

function __Context_open(
  arg0: Deno.PointerObject | null,
  arg1: number,
  arg2: number,
): Device {
  const ret = symbols.__Context_open(
    arg0,
    arg1,
    arg2,
  );
  return Device.__constructor(ret);
}

function __Context_dealloc(
  arg0: Deno.PointerObject | null,
): void {
  return symbols.__Context_dealloc(
    arg0,
  );
}

export class Context {
  ptr: Deno.PointerObject | null = null;

  static __constructor(ptr: Deno.PointerObject | null) {
    const self = Object.create(Context.prototype);
    self.ptr = ptr;
    return self;
  }

  [Symbol.dispose]() {
    this.dealloc();
    this.ptr = null;
  }

  constructor() {
    return __Context_init();
  }

  lsusb(): void {
    return __Context_lsusb(
      this.ptr,
    );
  }

  open(arg0: number, arg1: number): Device {
    return __Context_open(
      this.ptr,
      arg0,
      arg1,
    );
  }

  dealloc(): void {
    return __Context_dealloc(
      this.ptr,
    );
  }
}

function __Device_claim_interface(
  arg0: Deno.PointerObject | null,
  arg1: number,
): void {
  return symbols.__Device_claim_interface(
    arg0,
    arg1,
  );
}

function __Device_select_alternate_interface(
  arg0: Deno.PointerObject | null,
  arg1: number,
  arg2: number,
): void {
  return symbols.__Device_select_alternate_interface(
    arg0,
    arg1,
    arg2,
  );
}

function __Device_dealloc(
  arg0: Deno.PointerObject | null,
): void {
  return symbols.__Device_dealloc(
    arg0,
  );
}

export class Device {
  ptr: Deno.PointerObject | null = null;

  static __constructor(ptr: Deno.PointerObject | null) {
    const self = Object.create(Device.prototype);
    self.ptr = ptr;
    return self;
  }

  [Symbol.dispose]() {
    this.dealloc();
    this.ptr = null;
  }

  claim_interface(arg0: number): void {
    return __Device_claim_interface(
      this.ptr,
      arg0,
    );
  }

  select_alternate_interface(arg0: number, arg1: number): void {
    return __Device_select_alternate_interface(
      this.ptr,
      arg0,
      arg1,
    );
  }

  dealloc(): void {
    return __Device_dealloc(
      this.ptr,
    );
  }
}
